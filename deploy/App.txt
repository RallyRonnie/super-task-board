<!DOCTYPE html>
<html>
<head>
    <title>TS Super Cardboard</title>
    <!--  (c) 2015,2016 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Sat Apr 30 2016 10:13:05 GMT-0700 (PDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Sat Apr 30 2016 10:13:05 GMT-0700 (PDT)";
        var CHECKSUM = 233890025716;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('Rally.technicalservices.IconUtility',{
    singleton: true,
    
    icons_by_type: { 
        'hierarchicalrequirement':'icon-story',
        'story': 'icon-story',
        'userstory': 'icon-story', 
        'defect':'icon-defect', 
        'task': 'icon-task',
        'testset': 'icon-test-set',
        'testcase': 'icon-test'
    },
        
    getIconForType: function(type_name) {
        return this.icons_by_type[type_name] || 'icon-cone';
    }
});
Ext.define('TSUtilities',{
    singleton: true,
    logger: new Rally.technicalservices.Logger(),

    loadWSAPIItems: function(config){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        this.logger.log(config.model, "Loading with filters: ", Ext.clone(config.filters));
        
        var default_config = {
            fetch: ['ObjectID']
        };
        
        Ext.create('Rally.data.wsapi.Store', Ext.merge(default_config,config)).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(records);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    }
});
Ext.override(Rally.ui.inlinefilter.ArtifactSearchField,{
    
    getFilter: function() {
        console.log('here');
        var value = this.lastValue;
        if (!Ext.isEmpty(value)) {
            var filters = [],
                models = [this.model];
                //models = this.model.getArtifactComponentModels();

            var onlyNumbers = new RegExp('^(\\d+)$');
            if (onlyNumbers.test(value) && this._isValidField(this.model, ['FormattedID'])) {
                filters.push({
                    property: 'FormattedID',
                    operator: 'contains',
                    value: value
                });
            }

            _.each(models, function(model) {
                var prefixPlusNumbers = new RegExp(Ext.String.format('^({0}\\d+)$', model.idPrefix), 'i');
                if (prefixPlusNumbers.test(value) && model.isArtifact()) {
                    filters.push(
                        Rally.data.wsapi.Filter.and([
                            {
                                property: 'TypeDefOid',
                                operator: '=',
                                value: model.typeDefOid
                            },
                            {
                                property: 'FormattedID',
                                operator: 'contains',
                                value: value
                            }
                        ])
                    );
                } else if (prefixPlusNumbers.test(value) && this._isValidField(model, ['FormattedID'])) {
                    filters.push({
                        property: 'FormattedID',
                        operator: 'contains',
                        value: value
                    });
                }
            }, this);

            if (this._isValidField(this.model, ['Name'])) {
                filters.push({
                    property: 'Name',
                    operator: 'contains',
                    value: value
                });
            }

            if (this._isValidField(this.model, ['Description'])) {
                filters.push({
                    property: 'Description',
                    operator: 'contains',
                    value: value
                });
            }

            return Rally.data.wsapi.Filter.or(filters);
        }
    }
});
Ext.define('CA.technicalservices.filter.AdvancedFilterQuickRow',{
    extend: 'Ext.container.Container',
    alias: 'widget.tsadvancedfilterquickrow',
    
    layout: 'hbox',
    
    items: [
        {
            xtype: 'container',
            itemId: 'filter_box',
            flex: 1,
            layout: 'hbox',
            padding: '0 5 5 0',
            margin: '0 5 5 0',
            defaults: {
                margin: '0 5 5 0',
                padding: '0 5 5 0'
            }
        },
        {
            xtype:'container',
            margin: 15,
            items: [
                {
                    xtype       : 'rallybutton',
                    itemId      : 'add_button',
                    disabled    : false,
                    text        : '+ Add Filter'
                }
            ]
        }
    ],
    
    config: {
        model: 'UserStory',
        filter: null,
        addQuickFilterConfig: {
            whiteListFields: ['ArtifactSearch']
        },
        fields: [],
        initialValues: {}
    },

    initComponent: function() {
        this.callParent(arguments);
        
        this.addEvents(
            /**
             * @event filteradd
             * Fires when a new filter box is added
             * @param {CA.technicalservices.filter.AdvancedFilterQuickRow} this the quick filter row
             * @param {} the filter box
             */
            'filteradd',
            
            /**
             * @event quickfilterchange
             * @param {CA.technicalservices.filter.AdvancedFilterQuickRow} this the quick filter row
             * @param [{Rally.data.wsapi.Filter}] wsapiFilters the filters selected
             */
            'quickfilterchange'
        );

        this.down('#add_button').on('click', this._showQuickFilterPopover, this);
//        
        if ( Ext.isString(this.model) ) {
            this._getModel(this.model).then({
                scope: this,
                success: function(model) {
                    this.model = model;
                    this._displaySelectors();
                },
                failure: function(msg) {
                    Ext.Msg.alert("Problem loading model for filter", msg);
                }
            });
        } else {
            this._displaySelectors();
        }
    },
    
    _displaySelectors: function() {
        var model = this.model,
            me = this;
            
        console.log("--", this.initialValues);
        Ext.Array.each(Ext.Object.getKeys(this.initialValues), function(field_name, idx){
            var newItem = me._createField(idx+1, field_name, me.initialValues);
            me.fields.push(newItem);
            me.down('#filter_box').insert(idx+1, newItem);
        });

    },
    
    _changeFieldValue: function(field) {
        this.fireEvent('quickfilterchange', this, this.getFilters());
    },
    
    _getModel: function(model_name) {
        var deferred = Ext.create('Deft.Deferred');
        
        Rally.data.ModelFactory.getModel({
            type: model_name,
            success: function(model) {
                deferred.resolve(model);
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },
    
    _showQuickFilterPopover: function(button) {
        var addQuickFilterConfig = Ext.clone(this.addQuickFilterConfig);
            var blackList =  _.map(this.fields, 'name');
            
            if (addQuickFilterConfig && addQuickFilterConfig.whiteListFields) {
                addQuickFilterConfig.whiteListFields = _.reject(this.addQuickFilterConfig.whiteListFields, function(field){
                    return _.contains(blackList, field);
                });
            }
            
            this.addQuickFilterPopover = Ext.create('Rally.ui.popover.FieldPopover', {
                target: button.getEl(),
                placement: ['bottom', 'top', 'left', 'right'],
                fieldComboBoxConfig: _.merge({
                    model: this.model,
                    context: this.context || Rally.getApp().getContext(),
                    emptyText: 'Search filters...',
                    additionalFields: [
                        {
                            name: 'ArtifactSearch',
                            displayName: 'Search'
                        }
                    ],
                    blackListFields: blackList,
//                    _getModelNamesForDuplicates: function(field, fields) {
//                        var fieldCounts = _.countBy(fields, 'displayName');
//                        
//                        // TODO figure out what to do about using multiple record types
////                        if (fieldCounts[field.displayName] > 1) {
////                            return _.pluck(this.model.getModelsForField(field), 'displayName').join(', ');
////                        }
//                        return '';
//                    },
                    listeners: {
                        select: function(field, value) {
                            var fieldSelected = value[0].raw;
                            
                            this.addQuickFilterPopover.close();
                            this._onAddQuickFilterSelect(fieldSelected);
                        },
                        destroy: function(){
                            delete this.addQuickFilterPopover;
                        },
                        scope: this
                    }
                }, addQuickFilterConfig, function(a, b) {
                    if (_.isArray(a)) {
                        return a.concat(b);
                    }
                })
            });
    },

    _onAddQuickFilterSelect: function(field) {
        var index = this.fields.length;
        var newItem = this._createField(index + 1, field);
        this.fields.push(newItem);
        this.down('#filter_box').insert(index, newItem);
    },


    _createField: function(filterIndex, field, initialValues) {
        var fieldName = field.name || field,
            modelField = this.model.getField(fieldName),
            fieldConfig = Rally.ui.inlinefilter.FilterFieldFactory.getFieldConfig(this.model, fieldName, this.context),
            initialValue = initialValues && initialValues[fieldConfig.name] && initialValues[fieldConfig.name].rawValue;

        if (modelField && modelField.isDate() && initialValue) {
            initialValue = Rally.util.DateTime.fromIsoString(initialValue);
        }

        initialValue = Rally.ui.inlinefilter.FilterFieldFactory.getInitialValueForLegacyFilter(fieldConfig, initialValue);
        fieldConfig = Rally.ui.inlinefilter.FilterFieldFactory.getFieldConfigForLegacyFilter(fieldConfig, initialValue);

        Ext.applyIf(fieldConfig, {
            allowClear: true
        });
        
        Ext.merge(fieldConfig, {
            autoExpand: this.autoExpand,
            allowBlank: true,
            clearText: '-- Clear Filter --',
            hideLabel: false,
            beforeLabelTextTpl: [
                '<span class="filter-index">{[this.getFilterIndex()]}</span>',
                {
                    filterIndex: filterIndex,
                    displayIndex: this.isCustomMatchType(),
                    getFilterIndex: function() {
                        return this.displayIndex ? Ext.String.format('({0}) ', this.filterIndex) : '';
                    }
                }
            ],
            fieldLabel: '<span class="remove-quick-filter-icon icon-cross"></span>',
            labelAlign: 'top',
            labelSeparator: '',
            enableKeyEvents: true,
            margin: '0 5 0 0',
            cls: this.isCustomMatchType() ? 'indexed-field' : '',
            model: this.model,
            context: this.context,
            operator: this._getOperatorForModelField(modelField),
            //afterSubTpl: ' <span class="remove-quick-filter-icon icon-cross"></span>',
            renderSelectors: {
                removeIcon: '.remove-quick-filter-icon'
            },
            listeners: {
                afterrender: function (field) {
                    field.removeIcon.on('click', _.partial(this._removeQuickFilter, field), this);
                },
                change: this._changeFieldValue,
                scope: this
            }
        });

        if (!_.isUndefined(initialValue)) {
            Ext.merge(fieldConfig, {
                value: initialValue
            });
        }

        if (_.isPlainObject(field)) {
            Ext.apply(fieldConfig, field);
        }

        if (filterIndex === 1) {
            fieldConfig.itemId = this.self.FOCUS_CMP_ITEM_ID;
        }

        if (this._shouldApplyFiltersOnSelect(fieldConfig)) {
            Ext.merge(fieldConfig, {
                autoSelect: true,
                listeners: {
                    //select: this._applyFilters,
                    scope: this
                }
            });
        } else {
            Ext.merge(fieldConfig, {
                listeners: {
                    //change: this._applyFilters,
                    scope: this
                }
            });
        }
        
        if ( fieldConfig.xtype == "rallytextfield" || fieldConfig.xtype == 'rallyartifactsearchfield') {
            fieldConfig.height = 27;
            fieldConfig.margin = '2 5 25 0';
        }

        return Ext.widget(fieldConfig);
    },
    
    isCustomMatchType: function() {
        return this.matchType === 'CUSTOM';
    },

    _getOperatorForModelField: function(modelField) {
        var operator = '=';

        if (modelField && modelField.isCollection && modelField.isCollection()) {
            operator = 'contains';
        }

        return operator;
    },
    
    _removeQuickFilter: function(field) {
        var arrayIndex = field.beforeLabelTextTpl.filterIndex - 1;
        this.fields[arrayIndex] && this.fields[arrayIndex].destroy();
        this.fields.splice(arrayIndex, 1);
        this.updateFilterIndices();
        this.fireEvent('quickfilterchange', this, this.getFilters());

    },
    
    updateFilterIndices: function(matchType) {
        this.matchType = matchType || this.matchType;

        _.each(this.fields, function (field, index) {
            field.beforeLabelTextTpl.displayIndex = this.isCustomMatchType();
            field.beforeLabelTextTpl.filterIndex = index + 1;
            field.beforeLabelTextTpl.overwrite(field.labelEl.down('.filter-index'));
            if (this.isCustomMatchType()) {
                field.addCls('indexed-field');
            } else {
                field.removeCls('indexed-field');
            }
            if (Ext.isIE10m && field.inputEl) {
                field.setValue(field.getValue());
            }
        }, this);
    },

    _shouldApplyFiltersOnSelect: function(fieldConfig) {
        var field = this.model.getField(fieldConfig.name),
            attributeDefinition = field && field.attributeDefinition;

        return attributeDefinition &&
            (attributeDefinition.Constrained || attributeDefinition.AttributeType === 'OBJECT') &&
            !fieldConfig.multiSelect;
    },

    getFilters: function() {
        var filters = [];
        _.each(this.fields, function(field, index) {
            if (field.name === 'ModelType') {
                return;
            }

            if (!Ext.isEmpty(field.lastValue) && !field.hasActiveError()) {

                var lastValue = field.lastValue;

                var isRefUri = Rally.util.Ref.isRefUri(lastValue);
                var isRefOid = _.isNumber(Rally.util.Ref.getOidFromRef(lastValue));
                if (isRefUri && isRefOid && field.valueField === '_ref' && field.noEntryValue !== lastValue) {
                    var record = field.getRecord();
                    if (record) {
                        var uuidRef = record.get('_uuidRef');
                        if (uuidRef) {
                            lastValue = uuidRef;
                        }
                    }
                }

                var filter = _.isFunction(field.getFilter) ? field.getFilter() : Rally.data.wsapi.Filter.fromExtFilter({
                    property: field.name,
                    operator: field.operator,
                    value: lastValue
                });

                if(filter) {

                    if (field.allowNoEntry && field.noEntryValue === lastValue) {
                        filter.value = null;
                    }

                    Ext.apply(filter, {
                        name: field.name,
                        rawValue: lastValue,
                        filterIndex: index + 1
                    });

                    filters.push(filter);
                }
            }
        }, this);
        
        var filter_hash = {};
        Ext.Array.each(filters, function(filter){ filter_hash[filter.name] = filter; });
        
        return Ext.Object.getValues(filter_hash);
    }
});
Ext.define('CA.technicalservices.filter.AdvancedFilterRow',{
    extend: 'Ext.container.Container',
    alias: 'widget.tsadvancedfilterrow',
    
    layout: 'hbox',
    
    items: [
        {
            xtype       : 'rallybutton',
            itemId      : 'addButton',
            cls         : 'secondary rly-small icon-plus',
            margin      : '3px 0px 0px 3px',
            disabled    : false,
            text        : ' '
        },
        {
            xtype       : 'rallybutton',
            itemId      : 'removeButton',
            cls         : 'secondary rly-small icon-minus',
            margin      : '3px 3px 0px 0px',
            text        : ' '
        },
        {
            xtype  : 'container',
            itemId : 'filterFieldBox'
        },
        {
            xtype  : 'container',
            itemId : 'filterOperatorBox'
        },
        {
            xtype  : 'container',
            itemId : 'filterOperatorBox'
        },
        {
            xtype  : 'container',
            itemId : 'filterValueBox'
        },
        {
            xtype  : 'container',
            flex   : 1
        },
        { 
            xtype  : 'container',
            itemId : 'filterMatchBox'
        },
        {
            xtype  : 'container',
            itemId : 'filterClearBox'
        }
    ],
    
    config: {
        model: 'UserStory',
        
        filter: null
        
    },

    constructor: function(config) {
        this.mergeConfig(config);
        this.callParent([this.config]);
    },

    initComponent: function() {
        this.callParent(arguments);
        
        this.addEvents(
            /**
             * @event rowadd
             * Fires when row add button is pushed
             * @param {CA.technicalservices.filter.AdvancedFilterRow} this the filter
             */
            'rowadd',
            
            /**
             * @event filterchanged
             * Fires when filter has field + operator + value selected
             * @param {CA.technicalservices.filter.AdvancedFilterRow} this the filter
             * @param {Rally.data.wsapi.Filter} wsapiFilter the filter selected
             */
            'filterchanged',
            
            /**
             * @event filterremoved
             * Fires when a filter is cleared
             * @param {CA.technicalservices.filter.AdvancedFilterRow} this the empty row
             */
            'filterremoved'
        );
        
        
        this.down('#addButton').on('click', this._requestAdd, this);
        this.down('#removeButton').on('click', this.clearFilters, this);
        
        if ( Ext.isString(this.model) ) {
            this._getModel(this.model).then({
                scope: this,
                success: function(model) {
                    this.model = model;
                    this._displaySelectors();
                },
                failure: function(msg) {
                    Ext.Msg.alert("Problem loading model for filter", msg);
                }
            });
        } else {
            this._displaySelectors();
        }
    },
    
    _requestAdd: function() {
        //this.down('#addButton').setDisabled(true);
        this.fireEvent('rowadd');
    },
    
    _getModel: function(model_name) {
        var deferred = Ext.create('Deft.Deferred');
        
        Rally.data.ModelFactory.getModel({
            type: model_name,
            success: function(model) {
                deferred.resolve(model);
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },
    
    _displaySelectors: function() {
        this._addFieldSelector();
        this._addOperatorSelector();
    },
    
    _addFieldSelector: function() {
        var container = this.down('#filterFieldBox');
        container.removeAll();
        
        var value = null;
        if (! Ext.isEmpty(this.filter) ) {
            value = this.filter.config && this.filter.config.property || this.filter.property;
        }
        container.add({
            xtype: 'rallyfieldcombobox',
            itemId: 'fieldCombobox',
            model: this.model,
            value: value,
            _isNotHidden: this._allowFieldInDropDown,
            listeners: {
                scope: this,
                change: function(cb) {
                    this._addOperatorSelector(cb);
                }
            }
        });
    },
    
    _allowFieldInDropDown: function(field) {
        if ( field.hidden ) { 
            return false;
        }
        var blacklist = ["PredecessorsAndSuccessors","ObjectUUID","VersionId", "DragAndDropRank",
            "Attachments", "Tasks", "TestCases", "Predecessors", "Successors", "Tags", "Changesets",
            "Children", "Defects", "Discussion", "Milestones",
            "Feature",  "PortfolioItem", "Parent", "Subscription", "Project"];
    
        if ( Ext.Array.contains(blacklist, field.name) ) {
            return false;
        }
        
        var attributeDefn = field.attributeDefinition;
        
        if ( attributeDefn ) {
            if ( !attributeDefn.Filterable ) {
                return false;
            }
        }
        return true;
    },
    
    _addOperatorSelector: function() {
        var container = this.down('#filterOperatorBox');
        container.removeAll();
        var store = Ext.create('Ext.data.Store', {
            fields: ['name', 'displayName']
        });
        
        var field_selector = this.down('#fieldCombobox');
        var disabled = true;
        
        if ( !Ext.isEmpty(field_selector) ) {
            var field_name = field_selector.getValue();
            if ( ! Ext.isEmpty(field_name) ) {
                var field = this.model.getField(field_name);
               
                var store = field.getAllowedQueryOperatorStore();
                store.load();
                disabled = false;
            }
        }
        
        var value = null;
        if (! Ext.isEmpty(this.filter) ) {
            value = this.filter.config && this.filter.config.operator || this.filter.operator;
        }
        
        container.add({
            xtype: 'rallycombobox',
            itemId: 'operatorCombobox',
            disabled: disabled,
            autoLoad: false,
            value: value,
            editable: false,
            forceSelection: true,
            store: store,
            displayField: 'OperatorName',
            valueField: 'OperatorName',
            matchFieldWidth: true,
            listeners: {
                scope : this,
                change: this._createFilter,
                ready : this._addValueSelector
            }
        });
    },
    
    _addValueSelector: function(cb) {
        var container = this.down('#filterValueBox');
        container.removeAll();
        
        var editor = {
            xtype: 'rallytextfield',
            disabled: true,
            autoLoad: false,
            editable: false,
            forceSelection: true,
            matchFieldWidth: true
        };
        
        var field_selector = this.down('#fieldCombobox');
        
        if ( !Ext.isEmpty(field_selector) ) {
            var field_name = field_selector.getValue();
            if ( ! Ext.isEmpty(field_name) ) {
                if ( field_name == "ScheduleState" ) {
                    editor = this._getScheduleStateEditor();
                } else {
                    var field = this.model.getField(field_name);
                    editor = Rally.ui.renderer.GridEditorFactory.getEditor(field);
                }
            }
           
            
            if ( editor.xtype == "rallytextfield" ) {
                editor.height = 22;
            }
            
            if ( /editor/.test(editor.xtype) ) {
                editor = this._useModifiedEditor(editor,field);
            }
            
            editor.listeners = {
                scope : this,
                change: this._createFilter
            }
            
            if ( editor.xtype == 'rallycombobox' ) {
                editor.allowNoEntry = true;
            }
            editor.itemId = 'valueCombobox';
            
            var value_field = container.add(editor);
            
            if (! Ext.isEmpty(this.filter) ) {
                value = this.filter.config && this.filter.config.value || this.filter.value;
                value_field.setValue(value);
            }
        }
    },
    
    _useModifiedEditor: function(editor, field) {
        var editor_config = editor.field;
        if ( editor_config.xtype == 'rallyfieldvaluecombobox' ) {
            editor_config.model = this.model.elementName;
            editor_config.field = field.name;
        }
        
        if ( editor_config.xtype == 'rallyiterationcombobox'  || editor_config.xtype == 'rallyreleasecombobox') {
            editor_config.defaultToCurrentTimebox = true;
            delete editor_config.storeConfig;
        }
        
        return editor_config;
    },
    
    _getScheduleStateEditor: function() {
        return {
            xtype: 'rallyfieldvaluecombobox',
            model: this.model,
            field: 'ScheduleState'
        };
    },
    
    _createFilter: function() {
        var field_selector    = this.down('#fieldCombobox');
        var operator_selector = this.down('#operatorCombobox');
        var value_selector    = this.down('#valueCombobox');
        
        if ( Ext.isEmpty(field_selector) || Ext.isEmpty(operator_selector) || Ext.isEmpty(value_selector) ) {
            return;
        }
        
        var property = field_selector.getValue();
        var operator = operator_selector.getValue();
        var value = value_selector.getValue();
        this.filter = null;
        if ( !Ext.isEmpty(property) && !Ext.isEmpty(operator) ) {
            this.filter = Ext.create('Rally.data.wsapi.Filter',{ property: property, operator: operator, value: value });
        }
        this.fireEvent('filterchanged', this, this.filter);
        //this.down('#addButton').setDisabled(false);
    },
    
    clearFilters: function() {
        var field_selector    = this.down('#fieldCombobox');
        var operator_selector = this.down('#operatorCombobox');
        var value_selector    = this.down('#valueCombobox');
        
        value_selector.setValue(null);
        field_selector.setValue(null);
        this.filter = null;
        
        this.fireEvent('filterremoved',this);
        this.fireEvent('filterchanged',this, null);
        //this.down('#addButton').setDisabled(true);
    },
    
    getFilter: function() {
        return this.filter;
    }
    
});
Ext.define('CA.technicalservices.filter.AdvancedFilter',{
    extend: 'Ext.container.Container',
    alias: 'widget.tsadvancedfilter',
    
    layout: 'vbox',
    
    items: [
        {
            xtype           : 'rallybutton',
            itemId          : 'filterButton',
            cls             : 'secondary',
            text            : '<span class="icon-filter"> </span>',
            toolTipText     : 'Show Filters',
            _filterDisplay  : 'hidden'
        },
        { 
            xtype: 'container',
            layout: 'hbox',
            items: [
                {
                    xtype       : 'container',
                    itemId      : 'filterBox'
                },
                {
                    xtype       : 'container',
                    itemId      : 'selectorBox',
                    flex        : 1
                }
            ]
        }
    ],
    
    rows: [],
    filters: [],
    quickFilters: [],
    operator: 'and',
    
    config: {
        /**
         *  {Boolean} true to allow user to show/add advanced filter rows
         */
        allowAdvancedFilters: true,
        
        allowQuickFilters: true,
        
        model: 'UserStory'
    },

    /**
     * Gets the current state of the object. 
     * @return {Object} The current state
     */
    getState: function(){
        return { 
            filters: this._getFilterConfigs(),
            operator: this.operator,
            quickFilterMap: this._getQuickFilterConfig(),
            quickFilters: this.quickFilters
        };
    },
    
    constructor: function(config) {
        this.mergeConfig(config);
        this.callParent([this.config]);
        this._setButton();
        this.down('#filterButton').on('click', this._showHideFilters, this);
        if ( this.quickFilters && this.quickFilters.length > 0 ) {
            this.fireEvent('filterselected', this, this.quickFilters);
        }
    },

    initComponent: function() {
        this.callParent(arguments);

        this.addEvents(
            /**
             * @event filterselected
             * Fires when 
             * @param {CA.technicalservices.filter.AdvancedFilter} this the filter
             * @param {Rally.data.wsapi.Filter} wsapiFilter the filter selected
             */
            'filterselected'
        );
    },
    
    _showHideFilters: function(button) {
        if (button._filterDisplay == "visible" ) {
            button.toolTipText = 'Show Filters';
            button._filterDisplay = "hidden";
            this._hideFilters();
            return;
        } 
        button.toolTipText = 'Hide Filters';
        button._filterDisplay = "visible";
        this._showFilters();
    },
    
    _addRow: function(filter) {
        this.down('#filterBox').add({
            xtype:'tsadvancedfilterrow',
            filter: filter,
            listeners: {
                scope: this,
                rowadd: this._addRow,
                filterchanged: this._changeFilter
            }
        });
        
        this.rows = Ext.ComponentQuery.query('tsadvancedfilterrow');
    },
    
    _addQuickRow: function() {
        
        this.down('#filterBox').add({
            xtype:'tsadvancedfilterquickrow',
            initialValues: this.quickFilterMap,
            model: this.model,
            listeners: {
                scope: this,
                quickfilterchange: function(row, filters) {
                    this.quickFilters = filters;
                    this.quickFilterMap = this._getQuickFilterConfig();
                    this._setButton();
                    this.fireEvent('filterselected', this, filters);
                }
            }
        });
    },
    
    _showFilters: function() {
        var filter_box = this.down('#filterBox');
        filter_box.removeAll();
        
        if ( this.allowQuickFilters ) {
            this._addQuickRow();
        }
        
        if ( this.allowAdvancedFilters ) {
            if ( this.filters.length === 0 ) {
                this._addRow();
            } else {
                Ext.Array.each(this.filters, function(filter){
                    this._addRow(filter);
                }, this);
            }
            
            var selector_box = this.down('#selectorBox');
            selector_box.removeAll();
            var store = Ext.create('Rally.data.custom.Store',{
                data: [
                    {name:'All', value: 'and'},
                    {name:'Any', value: 'or'}
                ]
            });
            
            selector_box.add({
                xtype: 'rallycombobox',
                displayField: 'name',
                valueField: 'value',
                store: store,
                value: this.operator,
                listeners: {
                    scope: this,
                    change: function(cb) {
                        this.operator = cb.getValue();
                        this._setFilters();
                    }
                }
            });
        }
        
    },
    
    _hideFilters: function() {
        var filter_box = this.down('#filterBox');
        filter_box.removeAll();
        var selector_box = this.down('#selectorBox');
        selector_box.removeAll();
    },
    
    _changeFilter: function(row, filter) {
        this._setFilters();
    },
    
    _setFilters: function() {
        var me = this;
        
        this.filters = [];
        
        Ext.Array.each(this.rows, function(row) {
            var filter = row.getFilter();
            if ( Ext.isEmpty(filter) ) { return; }
            me.filters.push(filter);
        });
        
        var combined_filters = Rally.data.wsapi.Filter.and(this.filters);
        if ( this.operator == 'or' ) {
            combined_filters = Rally.data.wsapi.Filter.or(this.filters);
        }
        
        this.fireEvent('filterselected', this, combined_filters);
        this._setButton();
    },
    
    _setButton: function() {
        var button = this.down('#filterButton');
        
        if ( ( this.filters && this.filters.length > 0 ) || ( this.quickFilters && this.quickFilters.length > 0 ) ) {
            var count = this.filters && this.filters.length || 0;
            if ( count === 0 ) {
                count = this.quickFilters && this.quickFilters.length;
            }
            
            button.setText('<span class="icon-filter"> </span> (' + count + ')');
            button.addCls('reverse');
            return;
        }
        
        button.setText('<span class="icon-filter"> </span>');
        button.removeCls('reverse');
    },
    
    _getFilterConfigs: function() {
        return Ext.Array.map(this.filters, function(filter) {
            return filter.config;
        });
    },
    
    getFilters: function() {
        return this.quickFilters || [];
    },
    
    _getQuickFilterConfig: function() {
        var filter_map = {};
        Ext.Array.each(this.quickFilters, function(filter) {
            filter_map[filter.name] = filter;
        });
        return filter_map;
    }
    
});
Ext.define('Rally.technicalservices.artifact.EditDialog', {
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tseditdialog',

    requires: ['Rally.technicalservices.IconUtility'],
    
    config: {
        /**
         * @cfg {Rally.data.Model} record
         * The record that we're editing.
         */
        record: null,
        /**
         * 
         * @cfg {Rally.data.Model} row 
         * The record for the work item row that the item belongs to
         */
        row: null,
        autoShow : true,
        closable : true
    },
    

    constructor: function(config) {
        if (this.autoCenter) {
            this.scrollListener = Ext.create('Rally.ui.ScrollListener', this.center, this);
        }

        this.mergeConfig(config);
        
        if ( !this.record ) {
            throw "Rally.technicalservices.artifact.EditDialog requires a record";
        }
        this.title = config.title || this._getTitle( this.record );
        
        this.width = this.width || Ext.Array.min([ 600, Ext.getBody().getWidth() - 50 ]);
        this.height = this.height || Ext.Array.min([ 500, Ext.getBody().getHeight() - 50 ]),
        
        this.callParent([this.config]);
    },

    initComponent: function() {
        var me = this;
        this.callParent(arguments);
        
        this.addEvents(
            /**
             * @event artifactdeleted
             * Fires when user clicks delete
             * @param {Rally.technicalservices.artifact.EditDialog} source the dialog
             */
            'artifactdeleted'
        );
        
        this._addButtons();
        this._addFields();
        
        this.on('render', function(dialog) {
            var pickers = Ext.query('#color-block');
            
            if ( pickers.length === 0 ) {
                console.log('Cannot find square with id color-block');
            } else {
                var target = Ext.get(pickers[0]);
                
                target.on('click', function(evt,c) {
                    Rally.ui.popover.PopoverFactory.bake({
                        target: target,
                        field: 'Color',
                        record: me.record,
                       
                        _onColorClick: function(e) {
                            var el = Ext.get(Ext.isIE ? e.target : e.currentTarget);
                            el.addCls('selected');
                
                            var selectedColor = el.hasCls('clear-color') ? null : el.getColor('background-color');
                            target.setStyle('background-color',selectedColor);
                                                        
                            me.record.set('DisplayColor', selectedColor);
                            me.record.save({
                                success: function(result) {
                                    me.row.updateExistingRecord(result);
                                }
                            });
                            this.destroy();
                        }
                    });
                },this);
            }
        });
    },
    
    _addButtons: function() {
        this.addDocked({
            xtype: 'toolbar',
            dock: 'bottom',
            padding: '0 0 10 0',
            layout: {
                type: 'hbox',
                pack: 'center'
            },
            ui: 'footer',
            items: [{
                xtype: 'rallybutton',
                text: 'Close',
                cls: 'secondary rly-small',
                handler: this.close,
                scope: this,
                ui: 'link'
            },{
                xtype: 'rallybutton',
                itemId: 'deleteButton',
                text: 'Delete',
                cls: 'primary rly-small',
                scope: this,
                disabled: false,
                handler: function() {
                    this._deleteRecord();
                    this.close();
                }
            }]
        });
    },
    
    _getTitle: function(record) {
        var icon = Rally.technicalservices.IconUtility.getIconForType(record.get('_type'));
        return Ext.String.format("<span class='{0}'> </span><a href='{1}' target='_blank'>{2}</a>", 
            icon, 
            Rally.nav.Manager.getDetailUrl(record),
            record.get('FormattedID')
        );
    },
    
    
    _addFields: function() {
        var display_fields = [ 
            { text: 'Name', dataIndex: 'Name', editor: { xtype:'rallytextfield', height: 25 } },
            { text: 'Owner', dataIndex: 'Owner', editor: {
                    xtype: 'rallyusersearchcombobox',
                    project: Rally.getApp().getContext().getProject()._ref
                }
            }
        ];
        
        if ( this.record.get('_type') == 'task' ) {
            Ext.Array.push(display_fields, [
                { text: 'Estimate', dataIndex: 'Estimate', editor: { xtype: 'rallynumberfield', minValue: 0 } },
                { text: 'To Do', dataIndex: 'ToDo', editor: { xtype: 'rallynumberfield', minValue: 0}}
            ]);
        } else {
            display_fields.push({ text: 'Story Points', dataIndex: 'PlanEstimate', editor: { xtype: 'rallynumberfield', minValue: 0}});
            display_fields.push({ text: 'Schedule State', dataIndex: 'ScheduleState', editor: {
                xtype: 'rallyfieldvaluecombobox',
                model: this.record.get('_type'),
                field: 'ScheduleState'
            }});
        }
        
        display_fields = Ext.Array.push(display_fields, [
            { text: 'Blocked', dataIndex: 'Blocked', editor: {
                xtype: 'rallyfieldvaluecombobox',
                model: this.record.get('_type'),
                field: 'Blocked'
            }},
            { text: 'Blocked Reason', dataIndex: 'BlockedReason', editor: { xtype:'rallytextfield', height: 25 }}, 
            { text: 'Color', dataIndex: 'DisplayColor', renderer: function(value) {
                if ( Ext.isEmpty(value) ) {
                    return "<div id='color-block' style='width:20px;height:20px;border:1px solid black'></div>";
                }
                
                return "<div  id='color-block' style='width:20px;height:20px;background-color:" + value + "'></div>";
            }}, 
            { text: 'Description', dataIndex: 'Description', editor: { xtype: 'rallyrichtexteditor', height: 150 } }
        ]);
        
        Ext.Array.each(display_fields, function(field) {
            this._addField(this.record, field);
        },this);
    },
    
    _addField: function(record, field_def) {
        var container = Ext.create('Ext.container.Container',{
            layout: { type: 'hbox'},
            cls: 'ts-editor-container'
        });
        
        container.add({
            xtype: 'container',
            html: field_def.text,
            width: 150,
            cls: 'ts-editor-field-label',
            padding: 5,
            margin: 2
        });
        
        var value = record.get(field_def.dataIndex);

        if ( field_def.renderer ) {
            value = field_def.renderer.call(this, value,null,record);
        }
        
        var edit_configure = {
            xtype:'container',
            cls: 'ts-editor-field-contents',
            padding: 3,
            margin: 2
        };
        
        if ( field_def.editor ) {
            edit_configure.items = [Ext.apply({ 
                value: value,
                width: 300,
                project: record.get('Project')._ref,
                listeners: {
                    scope: this,
                    blur: function(editor) { 
                        this._changeAndSave(editor,field_def);
                    }
                }
            }, field_def.editor)];
        } else {
            edit_configure.html = value;
        }
        
        container.add(edit_configure);
        
        this.add( container );
    },
    
    _changeAndSave: function(editor, field_def) {
        var record = this.record;
        var row = this.row;
        
        var field_name = field_def.dataIndex;
        if ( !Ext.isEmpty(field_name) ) {
            record.set(field_def.dataIndex, editor.getValue());
            record.save({
                callback: function(result) {
                    row.updateExistingRecord(result);
                }
            });
        }
    },
    
    _deleteRecord: function() {
        var me = this;
        var row = this.row;

        var record = this.record;
        var type = record.get('_type');
        
        row.removeRecord(record);
        
        record.destroy({
            callback: function(result, operation) {
                if(operation.wasSuccessful()) {                    
                    if ( type != "defect" && type != "task" ) {
                        this.fireEvent('artifactdeleted', this);
                    } else {
                        row.updateExistingRecord(null);
                    }
                }
            }
        });
        

        
    }
    
});
/**
 *
 * Note that the plugin must be added to the grid view, not to the grid panel. For example, using {@link Ext.panel.Table viewConfig}:
 *
 *      viewConfig: {
 *          plugins: {
 *              ptype: 'tscelldragdrop',
 *          }
 *      }
 */
Ext.define('Rally.technicalservices.TSCellDragDrop', {
    extend: 'Ext.AbstractPlugin',
    alias: 'plugin.tscelldragdrop',

    uses: ['Ext.view.DragZone',
        'Ext.grid.ViewDropZone'],

    /**
     * @cfg {Boolean} enforceType
     * Set to `true` to only allow drops of the same type.
     *
     * Defaults to `false`.
     */
    enforceType: false,

    /**
     * @cfg {Boolean} applyEmptyText
     * If `true`, then use the value of {@link #emptyText} to replace the drag record's value after a node drop.
     * Note that, if dropped on a cell of a different type, it will convert the default text according to its own conversion rules.
     *
     * Defaults to `false`.
     */
    applyEmptyText: false,

    /**
     * @cfg {Boolean} emptyText
     * If {@link #applyEmptyText} is `true`, then this value as the drag record's value after a node drop.
     *
     * Defaults to an empty string.
     */
    emptyText: '',

    /**
     * @cfg {Boolean} dropBackgroundColor
     * The default background color for when a drop is allowed.
     *
     * Defaults to green.
     */
    dropBackgroundColor: '#C0D9AF',
    
    dropLineColor: 'green',

    /**
     * @cfg {Boolean} noDropBackgroundColor
     * The default background color for when a drop is not allowed.
     *
     * Defaults to red.
     */
    noDropBackgroundColor: '#FFBAD2',

    //<locale>
    /**
     * @cfg {String} dragText
     * The text to show while dragging.
     *
     * Two placeholders can be used in the text:
     *
     * - `{0}` The number of selected items.
     * - `{1}` 's' when more than 1 items (only useful for English).
     */
    dragText: '{0} selected row{1}',
    //</locale>

    /**
     * @cfg {String} ddGroup
     * A named drag drop group to which this object belongs. If a group is specified, then both the DragZones and
     * DropZone used by this plugin will only interact with other drag drop objects in the same group.
     */
    ddGroup: "GridDD",

    /**
     * @cfg {Boolean} enableDrop
     * Set to `false` to disallow the View from accepting drop gestures.
     */
    enableDrop: true,

    /**
     * @cfg {Boolean} enableDrag
     * Set to `false` to disallow dragging items from the View.
     */
    enableDrag: true,

    /**
     * @cfg {Object/Boolean} containerScroll
     * True to register this container with the Scrollmanager for auto scrolling during drag operations.
     * A {@link Ext.dd.ScrollManager} configuration may also be passed.
     */
    containerScroll: false,

    init: function (view) {
        var me = this;

        view.on('render', me.onViewRender, me, {
            single: true
        });
    },

    destroy: function () {
        var me = this;

        Ext.destroy(me.dragZone, me.dropZone);
    },

    enable: function () {
        var me = this;

        if (me.dragZone) {
            me.dragZone.unlock();
        }
        if (me.dropZone) {
            me.dropZone.unlock();
        }
        me.callParent();
    },

    disable: function () {
        var me = this;

        if (me.dragZone) {
            me.dragZone.lock();
        }
        if (me.dropZone) {
            me.dropZone.lock();
        }
        me.callParent();
    },

    onViewRender: function (view) {
        var me = this,
            scrollEl;

        if (me.enableDrag) {
            if (me.containerScroll) {
                scrollEl = view.getEl();
            }

            me.dragZone = new Ext.view.DragZone({
                view: view,
                ddGroup: me.dragGroup || me.ddGroup,
                dragText: me.dragText,
                containerScroll: me.containerScroll,
                scrollEl: scrollEl,
                getDragData: function (e) {
                    
                    var view = this.view,
                        item = e.getTarget(view.getItemSelector()),
                        record = view.getRecord(item),
                        task = me._getTaskFromRecord(e.target.id, view.getRecord(item)),
                        cell = e.getTarget(view.getCellSelector()),
                        dragEl, header;

                    if (item) {
                        dragEl = document.createElement('div');
                        dragEl.className = 'x-form-text';
                        dragEl.appendChild(document.createTextNode(cell.textContent || cell.innerText));

                        header = view.getHeaderByCell(cell);
                        return {
                            event: new Ext.EventObjectImpl(e),
                            ddel: dragEl,
                            item: e.target,
                            columnName: header.dataIndex,
                            record: record,
                            task: task
                        };
                    }
                },

                onInitDrag: function (x, y) {
                    var self = this,
                        data = self.dragData,
                        view = self.view,
                        selectionModel = view.getSelectionModel(),
                        record = data.record,
                        el = data.ddel;

                    // Update the selection to match what would have been selected if the user had
                    // done a full click on the target node rather than starting a drag from it.
                    if (!selectionModel.isSelected(record)) {
                        selectionModel.select(record, true);
                    }

                    Ext.fly(self.ddel).update(el.textContent || el.innerText);
                    //self.proxy.update(self.ddel);
                    self.onStartDrag(x, y);
                    return true;
                }
            });
        }

        if (me.enableDrop) {
            me.dropZone = new Ext.dd.DropZone(view.el, {
                view: view,
                ddGroup: me.dropGroup || me.ddGroup,
                containerScroll: true,

                getTargetFromEvent: function (e) {
                    var self = this,
                        view = self.view,
                        cell = e.getTarget(view.cellSelector),
                        row, header;

                    // Ascertain whether the mousemove is within a grid cell.
                    if (cell) {
                        row = view.findItemByChild(cell);
                        header = view.getHeaderByCell(cell);

                        if (row && header) {
                            return {
                                node: cell,
                                record: view.getRecord(row),
                                columnName: header.dataIndex
                            };
                        }
                    }
                },

                // On Node enter, see if it is valid for us to drop the field on that type of column.
                onNodeEnter: function (target, dd, e, dragData) {
                    var self = this,
                        destRecordID = target.record.get('__WorkProduct').get('ObjectID'),
                        sourceRecordID = dragData.record.get('__WorkProduct').get('ObjectID'),
                        task = dragData.task,
                        view = self.view,
                        store = view.getStore();

                    delete self.dropOK;

                    // Return if no target node or if over the same cell as the source of the drag.
                    if (!target || target.node === dragData.item.parentNode) {
                        return;
                    }
                    

                    // if no task, then we're moving the story
                    if ( !task ) {
                        if ( destRecordID !== sourceRecordID) {
                            self.dropOK = true;

                            var source_index = store.indexOf(dragData.record),
                                target_index = store.indexOf(target.record),
                                store_count = store.getCount();
                            
                            var config = {};
                            var borderStyle = '2px solid ' + me.dropLineColor;
                            
                            if ( target_index > source_index ) {
                                dragData.dropPosition = 'after';
                                config.borderBottom = borderStyle;
                            } else {
                                dragData.dropPosition = 'before';
                                config.borderTop  = borderStyle;
                            }
                            Ext.fly(target.node).applyStyles(config);
                        }
                        return;
                    }
                    
                    self.dropOK = true;

                    // Can only drop tasks onto the same row
                    if (destRecordID !== sourceRecordID) {
                        self.dropOK = false;
                    }

                    if ( self.dropOK ) {
                        if (me.dropCls) {
                            Ext.fly(target.node).addCls(me.dropCls);
                        } else {
                            Ext.fly(target.node).applyStyles({
                                backgroundColor: me.dropBackgroundColor
                            });
                        }
                    } else {
                        if (me.noDropCls) {
                            Ext.fly(target.node).addCls(me.noDropCls);
                        } else {
                            Ext.fly(target.node).applyStyles({
                                backgroundColor: me.noDropBackgroundColor
                            });
                        }
                    }
                },

                // Return the class name to add to the drag proxy. This provides a visual indication
                // of drop allowed or not allowed.
                onNodeOver: function (target, dd, e, dragData) {
                    return this.dropOK ? this.dropAllowed : this.dropNotAllowed;
                },

                // Highlight the target node.
                onNodeOut: function (target, dd, e, dragData) {
                    var cls = this.dropOK ? me.dropCls : me.noDropCls;

                    if (cls) {
                        Ext.fly(target.node).removeCls(cls);
                    } else {
                        Ext.fly(target.node).applyStyles({
                            backgroundColor: '',
                            borderTop: '',
                            borderBottom: ''
                        });
                    }
                },

                // Process the drop event if we have previously ascertained that a drop is OK.
                onNodeDrop: function (target, dd, e, dragData) {
                    if (this.dropOK) {
                        
                        var target_row = target.record;
                        var target_column = target.columnName;
                        var target_record = target.record.get('__WorkProduct');
                        
                        var source_task = dragData.task;
                        var source_column = dragData.columnName;
                        var source_record = dragData.record.get('__WorkProduct');
                        
                        console.log('source task:', source_task);
                        
                        if ( source_task ) {
                            if ( source_column == target_column ) {
                                // since we're in the same row, nothing to do!
                                return true;
                            }
                            
                            target_row.changeTaskColumn(source_task, source_column, target_column);
                        } else {
                            var dropPosition = dragData.dropPosition || "after";

                            if ( source_record.get('ObjectID') == target_record.get('ObjectID') ) {
                                return;
                            }
                            
                            target_row.rankRelative(source_record, target_record, dropPosition);
                        }
                        
                        return true;
                    }
                },

                onCellDrop: Ext.emptyFn
            });
        }
    },
    
    _getTaskFromRecord: function(card_id, row) {
        
        if ( Ext.isEmpty(card_id) ) {
            return null;
        }
        var task_id = card_id.replace(/T/,"");
        var item = null;
        Ext.Array.each(row.get('__Tasks'), function(task){
            var oid = task.get('ObjectID');
            if ( ""+oid == task_id ) {
                item = task;
            }
        });
        
        Ext.Array.each(row.get('__Defect'), function(defect){
            var oid = defect.get('ObjectID');
            if ( ""+oid == task_id ) {
                item = defect;
            }
        });
        
        return item;
    }
    
});
/**
 * Makes a combobox of fields where only the fields shared by all the provided models are shown
 * 
 */
 
 Ext.define('Rally.technicalservices.MultiModelFieldComboBox', {
    requires: [],
    extend: 'Rally.ui.combobox.FieldComboBox',
    alias: 'widget.tsmultimodelfieldcombobox',

    config: {
        /**
         * @cfg [{Rally.data.Model/String}] model (required) The models containing the specified field used to populate the store.
         */
        models: []
    },
    constructor: function(config) {
        this.mergeConfig(config);

        this.store = Ext.create('Ext.data.Store', {
            fields: [this.valueField, this.displayField, 'fieldDefinition'],
            data: []
        });

        return this.callParent([this.config]);
    },

    initComponent: function() {
        this.callParent(arguments);

        if (!Ext.isEmpty(this.models) ) {
            if (Ext.isString(this.models)) {
                this.models = this.models.split(',');
            }
            this._fetchModels();
        }
    },
    
    _fetchSpecificModel: function(model){
        var deferred = Ext.create('Deft.Deferred');

        Rally.data.ModelFactory.getModel({
            context: this.context,
            type: model,
            success: function(m) {
                deferred.resolve(m);
            },
            scope: this
        });
        
        return deferred.promise;
    },
    
    _fetchModels: function() {
        var promises = [];
        var me = this;
        
        Ext.Array.each(this.models, function(model){
            promises.push(function() {
                return me._fetchSpecificModel(model);
            });
        }, this);
       
        Deft.Chain.sequence(promises).then({
            scope: this,
            success: this._onModelsRetrieved,
            failure: function(msg) {
                Ext.Msg.alert("Couldn't retrieve model", msg);
            }
        });
    },

    _onModelsRetrieved: function(models) {
        this.models = models;
        this._populateStore();
    },
    
    _populateStore: function() {
        if (!this.store) {
            return;
        }
                
        var data = [];
        var fields_array = [];
        
        Ext.Array.each(this.models, function(model) {
            fields_array.push( Ext.Array.filter(model.getFields(), this._isNotHidden, this) );
        },this);
        
        console.log('fields_array', fields_array);
        
        data = this._getSharedPairs(fields_array);
        
        //data = _.sortBy(data,'name');
        
        console.log('data',data);

        this.store.loadRawData(data);
        this.setDefaultValue();
        this.onReady();
    },
    
    _getSharedPairs: function(array_of_fields_for_all_models){
        var calculations = {};
        
        Ext.Array.each(array_of_fields_for_all_models, function(array_of_fields_in_one_model){
            
            Ext.Array.each(array_of_fields_in_one_model, function(field){
                if ( Ext.isEmpty(calculations[field.name]) ) {
                    calculations[field.name] = {
                        field: field,
                        count: 0
                    };
                }
                
                if ( calculations[field.name].field.displayName == field.displayName ) {
                    calculations[field.name].count += 1;
                }
            });
        });
        
        var number_of_models = array_of_fields_for_all_models.length;
        
        var data = Ext.Array.pluck( 
            Ext.Array.filter(Ext.Object.getValues(calculations), function(calculation){
                return calculation.count == number_of_models;
            }), 
            'field'
        );
        
        return Ext.Array.map(data,function(field){
            return this._convertFieldToLabelValuePair(field);
        },this);
    }
});
/**
 */
 
 Ext.define('Rally.technicalservices.SprintTable', {
    extend: 'Ext.Container',
    alias: 'widget.tssprinttable',

    requires: ['Rally.technicalservices.IconUtility'],
    
    /**
     * @property {String} cls The base class applied to this object's element
     */
    cls: "tssprint",

    config: {
        /**
         * @cfg {Ext.data.Model} iteration 
         *
         */
        iteration: null,
        /**
         * 
         * @cfg String
         * 
         * The name of the field that is used for the task columns
         * 
         */
        taskStateField: 'State',
        /**
         * 
         * @cfg {object} 
         * Has a key for each allowed value in taskStateField and values for show and a task State to map to it
         * 
         */
        columnSettings: null

    },
    
    /**
     * @constructor
     * @param {Object} config
     */
    constructor: function (config) {
        this.mergeConfig(config);
        
        this.callParent([this.config]);
    },

    initComponent: function () {
        var me = this;
        this.callParent(arguments);
        
        this.addEvents(
            /**
             * @event
             * Fires when the grid has been rendered
             * @param {Rally.technicalservices.SprintTable} this
             * @param {Rally.ui.grid.Grid} grid
             */
            'gridReady'
        );
        
        this._getFieldValues('task',this.taskStateField).then({
            success: function(task_values) {
                
                this.state_values = task_values;
                
                this.table_store = Ext.create('Rally.data.custom.Store',{
                    model: 'TSTableRow',
                    sorters: [{property:'DragAndDropRank', direction:'ASC'}]
                });
                
                this._makeGrid();
            },
            failure: function(msg) {
                Ext.Msg.alert('Problem finding valid field values', msg);
            },
            scope: this
        });
        
    },
    
    _makeGrid: function() {
        this.removeAll();
        var table_store = this.table_store;
        
        var me = this;
        var columns = this._getColumns(this.state_values);
        this._defineCustomModel(columns);
                
        this.grid = this.add({ 
            xtype:'rallygrid', 
            store: table_store,
            columnCfgs: columns,
            showPagingToolbar : false,
            showRowActionsColumn : false,
            sortableColumns: false,
            disableSelection: true,
            enableColumnMove: false,
            viewConfig: {
                listeners: {
                    scope: this,
                    itemupdate: function(row) {
                        var tasks = row.get('__Tasks') || [];
                        var defects = row.get('__Defects') || [];
                        
                        var items = Ext.Array.push(tasks,defects);
                        
                        Ext.Array.each(items, function(record) {
                            var record_oid = record.ObjectID || record.get('ObjectID');
                            this._createTaskCard(record_oid,record,row);
                        },this);
                        this._setWorkItemListeners([row]);
                    }
                },
                plugins: [
                    {
                        ptype: 'tscelldragdrop'
                    }
                ]
            }
        });
        
        this._loadCards();
    },
    
    applyFilters: function(filters) {
        this.filters = filters;
        this._makeGrid();
    },
    
    applyOwnerFilter: function(user_ref) {
        this.userFilter = user_ref;
        
        var store = this.grid && this.grid.getStore();
        
        if ( !store ) { return; }
        
        var original_rows = Ext.clone( this._original_rows );
        var rows = [];
        
        store.removeAll(true);
        
        if ( user_ref == 'all' ) {
            rows = original_rows;
        } else {
            Ext.Array.each( original_rows, function(original_row) {
                var workproduct = original_row.get('__WorkProduct');
                var original_tasks   = original_row.get('__Tasks');
                var original_defects = original_row.get('__Defects');
                
                var wp_owner = workproduct.get('Owner');
                if ( !Ext.isEmpty(wp_owner) && wp_owner._ref == user_ref || Ext.isEmpty(wp_owner) && Ext.isEmpty(user_ref)) {
                    rows.push(original_row);
                } else {
                    var row = Ext.create('TSTableRow',{
                        DragAndDropRank: workproduct.get('DragAndDropRank'),
                        __WorkProduct: workproduct,
                        __Tasks: [],
                        __Defects: []
                    });
        
                    var tasks = Ext.Array.filter(original_tasks, function(item){
                        var owner = item.get('Owner');
                        return (owner && owner._ref == user_ref || Ext.isEmpty(owner) && Ext.isEmpty(user_ref));
                    });
                                
                    var defects = Ext.Array.filter(original_defects, function(item){
                        var owner = item.get('Owner');
                        return (owner && owner._ref == user_ref || Ext.isEmpty(owner) && Ext.isEmpty(user_ref));
                    });
                    
                    row.addTasks(tasks);
                    row.addDefects(defects);
                    
                    if ( tasks.length > 0 || defects.length > 0 ) {
                        rows.push(row);
                    }
                }
            });
        }
        
        store.loadRecords(rows);
        this._addTaskCards(rows);
        this._setWorkItemListeners(rows);
        
    },
    
    _loadCards: function() {
        var me = this;
        
        Deft.Chain.sequence([
            function() { return me._loadWorkItems('HierarchicalRequirement'); },
            function() { return me._loadWorkItems('Defect'); }
        ]).then({
            scope: this,
            success: function(results) {
                var records = Ext.Array.flatten(results);
                
                this._updateRows(records, this.grid.getStore()).then({
                    scope: this,
                    success: function(rows) {
                        this._addTaskCards(rows);
                        this._setWorkItemListeners(rows);
                        this.fireEvent('gridReady', this, this.grid);
                    }
                });
            },
            failure: function(msg) {
                Ext.Msg.alert("Problem Loading Iteration Work Items", msg);
            }
        });
        
    },
    
    _setWorkItemListeners: function(rows) {
        this._setWorkItemCardListeners(rows);
        this._setWorkItemAdderListeners(rows,'task');
        this._setWorkItemAdderListeners(rows,'defect');
    },

    _loadWorkItems: function(artifact_type) {
        var deferred = Ext.create('Deft.Deferred');
        
        var iteration_filter = [{property:'Iteration',value:''}];
        if ( this.iteration ) {
            iteration_filter = [{property:'Iteration.Name', value:this.iteration.get('Name')}];
        }
        
        var store_config = {
            model: artifact_type,
            context: { projectScopeDown: false, projectScopeUp: false },
            sorters: [{property:'DragAndDropRank',direction:'ASC'}],
            filters: iteration_filter,
            fetch: ['FormattedID', 'Name', 'ObjectID','Owner','PlanEstimate',
                'Blocked','Owner','BlockedReason','Description','DragAndDropRank','ScheduleState']
        };
        
        
        if ( !Ext.isEmpty(this.filters) ) {
            iteration_filter = Ext.create('Rally.data.wsapi.Filter', iteration_filter);
                        
            var all_filters = Ext.Array.map(this.filters, function(filter) { return filter; });
            all_filters.push(iteration_filter[0]);
            
            store_config.filters = all_filters;
        }
        
        var store = Ext.create('Rally.data.wsapi.Store',store_config);
                
        store.load({
            scope: this,
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(records);
                } else {
                    deferred.reject( operation.error.errors.join('. ') );
                }
            }
        });
        return deferred.promise;
    },
    
    _defineCustomModel: function(columns) {
        var me = this;
        
        var task_state_field = this.taskStateField;
        var columnSettings = this.columnSettings;
                
        var fields = Ext.Array.map(columns, function(column){
            var name = column.dataIndex;
            var type = 'object';
            return { name: name, type: type };
        });
        
        fields.push({name: '__Tasks',         type: 'object', defaultValue: []});
        fields.push({name: '__Defects',       type: 'object', defaultValue: []});
        fields.push({name: '_version',        type: 'number', defaultValue: 0});
        fields.push({name: 'DragAndDropRank', type: 'string'});
        
        Ext.define('TSTableRow', {
            extend: 'Ext.data.Model',
            fields: fields,
            
            addTasks: function(tasks) {
                        
                // assign empty ones to first displayed state (column)
                var columns = me.grid.getColumnCfgs();
                var first_state = columns[1].dataIndex;
              
                
                Ext.Array.each(tasks, function(task){
                    var state = task.get(task_state_field);
                    if (Ext.isEmpty(state) && !Ext.isEmpty(first_state) ) {
                        state = first_state;
                        task.set(task_state_field,state);
                        task.save();
                    }
                    
                    if ( Ext.isEmpty(this.get(state)) ) {
                        this.set(state, [task.getData()]);
                    } else {
                        var saved_tasks = this.get(state);
                        saved_tasks.push(task.getData());
                        this.set(state, saved_tasks);
                    }
                    
                    var old_tasks = this.get('__Tasks') || [];
                    var total_tasks = Ext.Array.merge( old_tasks, [task]);
                    this.set('__Tasks',total_tasks);
                },this);
            },
            
            addDefects: function(defects) {
                
                Ext.Array.each(defects, function(defect){
                    var state = defect.get(task_state_field);
                    if ( Ext.isEmpty(this.get(state)) ) {
                        this.set(state, [defect.getData()]);
                    } else {
                        var saved_defects = this.get(state);
                        saved_defects.push(defect.getData());
                        this.set(state, saved_defects);
                    }
                    
                    var old_defects = this.get('__Defects') || [];
                    var total_defects = Ext.Array.merge( old_defects, [defect]);
                    this.set('__Defects',total_defects);
                },this);
            },
            
            removeRecord: function(record) {
                console.log('removeRecord',record);
                var item_array = [];
                var state = null;
                
                if ( record.get('_type') == "task" ) {
                    item_array = '__Tasks';
                }
                
                if ( record.get('_type') == "defect" ) {
                    item_array = '__Defects';
                }
                
                if ( item_array.length > 0 ) {
                    state = record.get(task_state_field);
                    var state_array = this.get(state);
                    var clean_array = Ext.Array.filter(state_array, function(old_item){
                        return ( old_item.ObjectID != record.get('ObjectID') );
                    });
                    this.set(state, clean_array);
                } else {
                    this.destroy();
                }
            },
            
            changeTaskColumn: function(record, source_column, target_column) {
                // remove from existing column list in row record
                var old_column_items = this.get(source_column) || [];
                var new_column_items = this.get(target_column) || [];
                var record_data = record.getData();
                
                new_column_items.push(record_data);
                this.set(target_column, new_column_items);
                
                this.set(source_column, 
                    Ext.Array.filter(old_column_items, function(old_item) {
                        return ( old_item.ObjectID != record_data.ObjectID );
                    })
                );
                
                this.setItemField(record, task_state_field, target_column);
            },
            
            // given a task, defect or workproduct that is already known by 
            // this row, replace it with an updated version
            updateExistingRecord: function(record) {
                var version = this.get('_version') || 0;
                if ( this.get('_type') == "hierarchicalrequirement" ) {
                    version++;
                    this.set('_version', version);
                    
                    return;
                } 

                // reload the workproduct for rolled up states
                var wp = this.get('__WorkProduct');
                
                wp.getProxy().getModel().load(wp.get('ObjectID'), {
                    scope: this,
                    success: function(result) {
                        this.set('__WorkProduct', result);
                        // need to change another field to signal the store for listeners (refresh)
                        version++;
                        this.set('_version', version);
                    }
                });

            },
            
            setItemField: function(record, field_name, value) {                
                record.set(field_name, value);
                
                if ( record.get('_type') == 'task' && field_name !== "State" && field_name == task_state_field && !Ext.isEmpty( columnSettings )) {
                    var setting = columnSettings[value];
                    if ( !Ext.isEmpty(setting['stateMapping'])) {
                        record.set('State', setting['stateMapping']);
                    }
                }
                record.save().then({
                    scope: this,
                    success: function() { this.updateExistingRecord(record); } 
                });
            },
            
            rankRelative: function(recordToRank, relativeRecord, dropPosition){
            
                Rally.data.Ranker.rankRelative({
                    recordToRank: recordToRank,
                    relativeRecord: relativeRecord,
                    position: dropPosition,
                    saveOptions: {
                        scope: me,
                        callback: function() {
                            me._makeGrid();
                        }
                    }
                });
            }
        });
    },
    
    _createTaskCard: function(record_oid, record,row){
        var me = this;
        
        var tasks = Ext.query('#C' + record_oid);
        
        if ( tasks.length === 0 ) {
            console.log('Cannot find display spot for task', record_oid);
        } else {
            var card_element = Ext.get(tasks[0]);
            card_element.setHTML('');
            
            if ( this.down('#child_' + record_oid) ) {
                this.down('#child_' + record_oid).destroy();
            }
            var card = Ext.create('Rally.technicalservices.sprintboard.TaskCard',{
                record: record,
                itemId: 'child_' + record_oid,
                renderTo: card_element
            });
            
            card_element.on('click', function(evt,c) {
                this._showQuickView(record,row);
            },this);
        }
    },
    
    workproductTemplate: new Ext.XTemplate(
        "<tpl>",
            '<div class="x4-component rui-card {_type} x4-border-box xdrag-handle cardboard {[this.getBlockedClass(values.Blocked)]}">',
                '<div class="artifact-color"></div>',
                '<div class="card-table-ct {_type}" id="{ObjectID}" type={_type}">',
                    '<table class="card-table column-container">',
                        '<tr>',
                            '<td class="rui-card-content">',
                                '<div class="left-header">',
                                    '<div class="id" style="min-width: 68px">',
                                        '<span class="formatted-id-template">',
                                            '<a class="formatted-id-link" target="_blank" href="{[this.getArtifactURL(values)]}">',
                                                '<span class="{[this.getArtifactIcon(values)]}"> </span> {FormattedID}',
                                            '</a>',
                                        '</span>',
                                    '</div> ',
                                    '<div class="owner-name">{[this.getOwnerName(values.Owner)]}</div>',
                                '</div>',
                                '<div class="field-content Name type-string">',
                                    '<div class="rui-field-value">{Name}</div>',
                                '</div>',
                                '<div class="field-content ScheduleState type-string">',
                                    '<div class="rui-field-value">{ScheduleState}</div>',
                                '</div>',
                            '</td>',
                            
                            '<td class="rui-card-right-side has-estimate">',
                                '<div class="right-top-side">',
                                    '<div class="card-owner-field">',
                                        '<div class="field-content Owner">',
                                            '<div class="rui-field-value">',
                                                '{[this.getOwnerImage(values.Owner)]}',
                                            '</div>',
                                        '</div>',
                                    '</div>',
                                '</div>',
                                '<div class="right-bottom-side">',
                                '<div class="card-estimate-field">',
                                    '<div class="field-content PlanEstimate xeditable" >',
                                        '<div class="rui-field-value">{PlanEstimate}</div>',
                                    '</div>',
                                '</div>',
                            '</div>',
                            '</td>',
                            
                        '<tr/>',
                    '</table>',
                '</div>',
            '</div>',
            '<div class="actions">',
                '+<span id="add_task_to_{ObjectID}" class="icon-task add-task"> </span>',
                '+<span id="add_defect_to_{ObjectID}" class="icon-defect add-defect"> </span>',
            '</div>',
        "</tpl>",
        {
            getArtifactURL: function(record){
                return Rally.nav.Manager.getDetailUrl(record);
            },
            
            getBlockedClass: function(blocked) {
                if ( blocked !== true ) {
                    return "";
                }
                return "blocked";
            },
            getOwnerName: function(owner) {
                if ( Ext.isEmpty(owner) ) {
                    return "--";
                }
                return owner._refObjectName;
            },
            getOwnerImage: function(owner) {
                if (Ext.isEmpty(owner)) {
                    return " ";
                }
                return Ext.String.format('<img class=" card-owner-img" src="/slm/profile/image/{0}/25.sp">', 
                    owner.ObjectID);
            },
            getArtifactIcon: function(record) {
                var type = record._type;
                
                return Rally.technicalservices.IconUtility.getIconForType(type);
            }
        }
    ),
    
    _getColumns: function(task_states) {
        var me = this;
        var columnSettings = this.columnSettings;
                
        var columns = [{
            dataIndex: '__WorkProduct',
            text: 'Features',
            flex: 1,
            align: 'center',
            renderer: function(value) {
                if ( value.get('ScheduleState') == "Accepted" ) {
                    return "";
                }
                return me.workproductTemplate.apply(value.getData());
            }
        }];

        Ext.Array.each(task_states, function(state){
            if ( Ext.isEmpty(columnSettings) || !Ext.isEmpty(columnSettings[state]) || Ext.Object.getKeys(columnSettings).length === 0 ) {
                columns.push(me._getStateColumnCfg(state));
            }
        });
        
        if ( columns.length > 1 ) {
            columns[columns.length - 1].renderer = function(value,meta,record){
                var workproduct = record.get('__WorkProduct');
                
                if ( workproduct.get("ScheduleState") == "Accepted" ) {
                    return me.workproductTemplate.apply(workproduct.getData());
                } else {
                    var html = [];
                    
                    Ext.Array.each(value, function(item){
                        html.push(
                            Ext.String.format(
                                '<div id="C{0}" style="height:37px;float: left;"></div>',
                                item.ObjectID
                            )
                        );
                    });
                    
                    return html.join('\n');
                }
            };
        }
        
        return columns;
    },
    
    _getStateColumnCfg: function(state) {
        return {
            dataIndex: state,
            text: state || "No Entry",
            flex: 1,
            align: 'center',
            renderer: function(value) {
                var html = [];
                
                Ext.Array.each(value, function(item){
                    html.push(
                        Ext.String.format(
                            '<div id="C{0}" style="height:37px;float: left;"></div>',
                            item.ObjectID
                        )
                    );
                });
                
                return html.join('\n');
            }
        };
    },
    
    _updateRows: function(workproducts, table_store) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        Deft.Chain.sequence([
            function() { return me._loadTasks(workproducts); },
            function() { return me._loadChildDefects(workproducts); }
        ]).then({
            scope: this,
            success: function(results) {
                var me = this;
                var tasks_by_workproduct = results[0];
                var defects_by_workproduct = results[1];
                
                var rows = this._getRowsFromWorkproducts(workproducts,tasks_by_workproduct,defects_by_workproduct);

                table_store.loadRecords(rows);

                this._original_rows = rows;
                
                deferred.resolve(rows);
            },
            failure: function(msg) {
                Ext.Msg.alert('Problem loading artifacts', msg);
                deferred.reject();
            }
        });
        return deferred.promise;
    },
    
    _loadChildDefects: function(workproducts) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        var workproducts_by_oid = {};
        Ext.Array.each(workproducts, function(workproduct){
            var oid = workproduct.get('ObjectID');
            workproducts_by_oid[oid] = workproduct;
        });
        
        var iteration_filter = [{property:'Requirement.Iteration',value:''}];
        if ( this.iteration ) {
            iteration_filter = [{property:'Requirement.Iteration.Name', value:this.iteration.get('Name')}];
        }
        
        var defect_store = Ext.create('Rally.data.wsapi.Store',{
            model: 'Defect',
            context: { projectScopeDown: false, projectScopeUp: false },
            filters: iteration_filter,
            fetch: ['FormattedID', 'Name', 'ObjectID','Owner','PlanEstimate','DisplayColor',
                'Blocked','Owner','BlockedReason','Description','Requirement', 
                this.taskStateField]
        });
        
        defect_store.load({
            scope: this,
            callback : function(records, operation, successful) {
                if (successful){
                    var defects_by_workproduct = {};
                    Ext.Array.each(records, function(record){
                        var workproduct_oid = record.get('Requirement').ObjectID;
                        if ( Ext.isEmpty(defects_by_workproduct[workproduct_oid]) ) {
                            defects_by_workproduct[workproduct_oid] = [];
                        }
                        defects_by_workproduct[workproduct_oid].push(record);
                    });
                    
                    deferred.resolve(defects_by_workproduct);
                } else {
                    console.error('Problem loading: ' + operation.error.errors.join('. '));
                    Ext.Msg.alert('Problem loading child defects', operation.error.errors.join('. '));
                }
            }
        });
        
        return deferred.promise;
    },
    
    _loadTasks: function(workproducts) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        var workproducts_by_oid = {};
        Ext.Array.each(workproducts, function(workproduct){
            var oid = workproduct.get('ObjectID');
            workproducts_by_oid[oid] = workproduct;
        });
        
        var iteration_filter = [{property:'Iteration',value:''}];
        if ( this.iteration ) {
            iteration_filter = [{property:'Iteration.Name', value:this.iteration.get('Name')}];
        }
        
        var task_store = Ext.create('Rally.data.wsapi.Store',{
            model: 'Task',
            context: { projectScopeDown: false, projectScopeUp: false },
            sorters: [{property:'TaskIndex',direction:'ASC'}],
            filters: iteration_filter,
            fetch: ['FormattedID', 'Name', 'ObjectID','DisplayColor','Description',
                'Project',this.taskStateField, 'Owner', 'Blocked', 'BlockedReason',
                'Estimate','ToDo','WorkProduct']
        });
        
        task_store.load({
            scope: this,
            callback : function(records, operation, successful) {
                if (successful){
                    var tasks_by_workproduct = {};
                    Ext.Array.each(records, function(record){
                        var workproduct_oid = record.get('WorkProduct').ObjectID;
                        if ( Ext.isEmpty(tasks_by_workproduct[workproduct_oid]) ) {
                            tasks_by_workproduct[workproduct_oid] = [];
                        }
                        tasks_by_workproduct[workproduct_oid].push(record);
                    });
                    deferred.resolve(tasks_by_workproduct);
                } else {
                    console.error('Problem loading: ' + operation.error.errors.join('. '));
                    Ext.Msg.alert('Problem loading child tasks', operation.error.errors.join('. '));
                }
            }
        });
        
        return deferred.promise;
    },
    
    _getRowsFromWorkproducts: function(workproducts,tasks_by_workproduct,defects_by_workproduct) {
        var rows = [];
        var me = this;
        
        // sort because the custom store doesn't seem to do it
        var sorted_workproducts = Ext.Array.sort(workproducts, function(a,b){
            var a_is_lower  = ( a.get('DragAndDropRank') < b.get('DragAndDropRank') );
            var a_is_higher = ( a.get('DragAndDropRank') > b.get('DragAndDropRank') );
            return a_is_lower ? -1 : ( a_is_higher) ? 1 : 0;
        });
        
        Ext.Array.each( sorted_workproducts, function(workproduct){
            var row = Ext.create('TSTableRow',{
                DragAndDropRank: workproduct.get('DragAndDropRank'),
                __WorkProduct: workproduct,
                __Tasks: [],
                __Defects: []
            });
            
            row.addTasks(tasks_by_workproduct[workproduct.get('ObjectID')] || []);
            row.addDefects(defects_by_workproduct[workproduct.get('ObjectID')] || []);
            
            rows.push(row);
        });
                
        return rows;
    },
    
    _getFieldValues: function(model_name,field_name){
        var deferred = Ext.create('Deft.Deferred');
        
        Rally.data.ModelFactory.getModel({
            type: model_name,
            success: function(model) {
                model.getField(field_name).getAllowedValueStore().load({
                    callback: function(records, operation, success) {
                        var valid_values = Ext.Array.map(records, function(allowed_value){
                            return allowed_value.get('StringValue');
                        });
                        deferred.resolve(valid_values);
                    }
                });
            }
        });
        return deferred;
    },
    
    _addTaskCards: function(rows) {
        Ext.Array.each(rows, function(row){
            
            var tasks = row.get('__Tasks') || [];
            var defects = row.get('__Defects') || [];
            
            var items = Ext.Array.push(tasks,defects);
            
            Ext.Array.each(items, function(record) {
                var record_oid = record.get('ObjectID');
                this._createTaskCard(record_oid,record,row);
            },this);
        },this);
    },
    
    _setWorkItemAdderListeners: function(rows, target_type) {
        Ext.Array.each(rows, function(row){
            var record = row.get('__WorkProduct');
            var record_oid = record.get('ObjectID');
            
            var icon_query = Ext.String.format('#add_{0}_to_{1}', target_type, record_oid);
            var add_task_icon = Ext.query(icon_query);
            
            if ( add_task_icon.length === 0 ) {
                console.log('Cannot find adder for work item', record_oid);
            } else {
                var adder_element = Ext.get(add_task_icon[0]);
                adder_element.on('click', function(evt,c) {
                    this._createNewFor(target_type, record, row);
                },this);
            }
        },this);
    },
    
    _createNewFor: function(target_type, parent_record, row) {
        var me = this;
        
        Rally.data.ModelFactory.getModel({
            type: target_type,
            success: function(model) {
                var parent_ref = parent_record.get('_ref');
                
                var config = { 
                    Name: 'New Item',
                    WorkProduct: { _ref: parent_ref } 
                };
                
                if ( target_type == "defect" ) {
                    delete config.WorkProduct;
                    config.Requirement = { _ref: parent_ref }
                }
                
                // assign to first displayed state (column)
                var columns = me.grid.getColumnCfgs();
                if ( columns.length > 1 ) {
                    config[me.taskStateField] = columns[1].dataIndex;
                }
                
                var item = Ext.create(model, config); 
                
                item.save({
                    callback: function(record,operation) {
                        if ( operation.error && operation.error.errors && operation.error.errors.length > 0 ) {
                            Ext.Msg.alert("Problem creating " + target_type, operation.error.errors.join(' '));
                            return;
                        }

                        if ( target_type == "task" ) {
                            row.addTasks([record]);
                        } else {
                            row.addDefects([record]);
                        }
                        me._showQuickView(record,row);
                    }
                });
                
            }
        });
    },
    
    _setWorkItemCardListeners: function(rows) {
        Ext.Array.each(rows, function(row){
            var record = row.get('__WorkProduct');
            var record_oid = record.get('ObjectID');
            var cards = Ext.query('#' + record_oid);
            
            if ( cards.length === 0 ) {
                console.log('Cannot find card for work item', record_oid);
            } else {
                var card_element = Ext.get(cards[0]);
                card_element.on('click', function(evt,c) {
                    this._showQuickView(record,row);
                },this);
            }
        },this);
    },
    
    _showQuickView: function(record,row) {
        var me = this;
        Ext.create('Rally.technicalservices.artifact.EditDialog', {
            record: record,
            row: row,
            listeners: {
                artifactdeleted: function() {
                    
                }
            }
        }).show();
    }
    

});

Ext.define('Rally.technicalservices.sprintboard.TaskCard',{
    extend: 'Ext.Component',
    alias: 'widget.tstaskcard',
    
    config: {
       /**
         * @cfg {Rally.data.Model} (required)
         * The data store record that this card represents
         */
        record: undefined
    },
    
    constructor: function (config) {
        config = config || {};
        
        //console.log(Ext.getClass(config.record).superclass.self.getName());
        if ( config && config.record && !Ext.isEmpty( Ext.getClass(config.record) )) {
            config.record = config.record.getData();
        }
        
        this.mergeConfig(config);

        this.callParent([this.config]);
    },

    initComponent: function () {
        this.callParent();

//        this.addEvents(
//            
//        );
        
    },
    
    renderTpl: new Ext.XTemplate(
        '<tpl>',
            '<div id="T{$comp.record.ObjectID}" class="ts_task_card {$comp.record._type} {[this.getBlockedClass(values.$comp.record.Blocked)]}" style="{[this.getStyle(values.$comp.record)]}">',
                '{$comp.record.Name:ellipsis(15, true)}',
            '</div>',
        '</tpl>',
        {
            getStyle: function(record) {
                if (!Ext.isEmpty(record.DisplayColor)) {
                    return Ext.String.format("background-color:{0};color:white;",
                         record.DisplayColor
                     );
                }
                return "color:black;";
            },
            
            getBlockedClass: function(blocked) {
                if ( blocked !== true ) {
                    return "";
                }
                return "blocked";
            }
        }
    )
    
});
/**
 * Allows configuration of task state mapping for kanban columns
 *
 *      @example
 *      Ext.create('Ext.Container', {
 *          items: [{
 *              xtype: 'tscolumnsettingsfield',
 *              value: {}
 *          }],
 *          renderTo: Ext.getBody().dom
 *      });
 *
 */
Ext.define('Rally.technicalservices.ColumnSettingsField', {
    extend: 'Ext.form.field.Base',
    alias: 'widget.tscolumnsettingsfield',
    plugins: ['rallyfieldvalidationui'],
    requires: [
        'Rally.ui.combobox.ComboBox',
        'Rally.ui.TextField',
        'Rally.ui.combobox.FieldValueComboBox',
        'Rally.ui.plugin.FieldValidationUi'
    ],

    fieldSubTpl: '<div id="{id}" class="settings-grid"></div>',

    width: 600,
    cls: 'column-settings',

    config: {
        /**
         * @cfg {Object}
         *
         * The column settings value for this field
         */
        value: undefined,

        defaultCardFields: ''
    },

    onDestroy: function() {
        if (this._grid) {
            this._grid.destroy();
            delete this._grid;
        }
        this.callParent(arguments);
    },

    onRender: function() {
        this.callParent(arguments);

        this._store = Ext.create('Ext.data.Store', {
            fields: ['column', 'shown', 'stateMapping' ],
            data: []
        });

        this._grid = Ext.create('Rally.ui.grid.Grid', {
            autoWidth: true,
            renderTo: this.inputEl,
            columnCfgs: this._getColumnCfgs(),
            showPagingToolbar: false,
            showRowActionsColumn: false,
            enableRanking: false,
            store: this._store,
            editingConfig: {
                publishMessages: false
            }
        });
    },

    _getColumnCfgs: function() {
        var columns = [
            {
                text: 'Column',
                dataIndex: 'column',
                emptyCellText: 'None',
                flex: 2
            },
            {
                text: 'Show',
                dataIndex: 'shown',
                flex: 1,
                renderer: function (value) {
                    return value === true ? 'Yes' : 'No';
                },
                editor: {
                    xtype: 'rallycombobox',
                    displayField: 'name',
                    valueField: 'value',
                    editable: false,
                    storeType: 'Ext.data.Store',
                    storeConfig: {
                        remoteFilter: false,
                        fields: ['name', 'value'],
                        data: [
                            {'name': 'Yes', 'value': true},
                            {'name': 'No', 'value': false}
                        ]
                    }
                }
            },
            {
                text: 'State Mapping',
                dataIndex: 'stateMapping',
                emptyCellText: '--No Mapping--',
                flex: 2,
                editor: {
                    xtype: 'rallyfieldvaluecombobox',
                    model: Ext.identityFn('Task'),
                    field: 'State',
                    listeners: {
                        ready: function (combo) {
                            var noMapping = {};
                            noMapping[combo.displayField] = '--No Mapping--';
                            noMapping[combo.valueField] = '';

                            combo.store.insert(0, [noMapping]);
                        }
                    }
                }
            }
        ];

        return columns;
    },

    /**
     * When a form asks for the data this field represents,
     * give it the name of this field and the ref of the selected project (or an empty string).
     * Used when persisting the value of this field.
     * @return {Object}
     */
    getSubmitData: function() {
        var data = {};
        data[this.name] = Ext.JSON.encode(this._buildSettingValue());
        return data;
    },

    _buildSettingValue: function() {
        var columns = {};
        this._store.each(function(record) {
            if (record.get('shown')) {
                columns[record.get('column')] = {
                    stateMapping: record.get('stateMapping')
                };
                
            }
        }, this);
        return columns;
    },

    getErrors: function() {
        var errors = [];
//        if (this._storeLoaded && !Ext.Object.getSize(this._buildSettingValue())) {
//            errors.push('At least one column must be shown.');
//        }
        return errors;
    },

    setValue: function(value) {
        this.callParent(arguments);
        this._value = value;
    },

    _getColumnValue: function(columnName) {
        var value = this._value;
        return value && Ext.JSON.decode(value)[columnName];
    },

    refreshWithNewField: function(field) {
        delete this._storeLoaded;
        field.getAllowedValueStore().load({
            callback: function(records, operation, success) {
                var data = Ext.Array.map(records, this._recordToGridRow, this);
                this._store.loadRawData(data);
                this.fireEvent('ready');
                this._storeLoaded = true;
            },
            scope: this
        });
    },

    _recordToGridRow: function(allowedValue) {
        var columnName = allowedValue.get('StringValue');
        var pref = this._store.getCount() === 0 ? this._getColumnValue(columnName) : null;

        var column = {
            column: columnName,
            shown: false,
            stateMapping: ''
        };

        if (pref) {
            Ext.apply(column, {
                shown: true,
                stateMapping: pref.stateMapping
            });

        }

        return column;

    }
});

Ext.define("TSSuperCardboard", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    
    iteration: null,
    
    settingsScope: 'project',

    config: {
        defaultSettings: {
            taskStateField: "State"
        }
    },
    
    layout: { type: 'border' },
    
    items: [
        {xtype:'container', itemId:'selector_box', region: 'north',  layout: { type:'hbox' }, minHeight: 40},
        {xtype:'container', itemId:'display_box' , region: 'center', layout: { type: 'border'} }
    ],
    
    launch: function() {
        var me = this;
        this._addSelectors();
    }, 
    
    _addSelectors: function() {
        var container = this.down('#selector_box');
        container.add({
            xtype: 'rallyaddnew',
            minWidth: 100,
            ignoredRequiredFields: ['Name', 'Project', 'ScheduleState','State'],
            recordTypes: ['User Story','Defect'],
            listeners: {
                scope: this,
                create: function( button, created_record){
                    var me = this;
                    var iteration = this.iteration || this.down('rallyiterationcombobox').getRecord();
                    
                    if ( iteration ) {
                        created_record.set('Iteration', { _ref: iteration.get('_ref') } );
                        created_record.save({
                            callback: function(saved_record, operation) {
                                saved_record.save({
                                    params: {
                                        rankTo: 'BOTTOM'
                                    },
                                    callback: function(result) {
                                        if(operation.wasSuccessful()) {
                                            me.updateData();
                                        }
                                    }
                                });
                            }
                        });
                    }
                }
            }
        });
        
        container.add({
            xtype:'tsadvancedfilter',
            stateful: true,
            stateId: 'super-task-board-advanced-quick-filter-z',
            allowAdvancedFilters: false,
            allowQuickFilters: true,
            stateEvents: ['filterselected'],
            model: 'Artifact',
            listeners: {
                scope: this,
                filterselected: function(advanced_filter, filters) {
                    var table = this.down('tssprinttable');
                    
                    if ( Ext.isEmpty(table) ) { return; }
                    
                    if ( ! Ext.isEmpty(filters) ) {
                        console.log('Found Filters', filters.toString());
                        this.down('tssprinttable').applyFilters(filters);
                    } else {
                        console.log('No filters');
                        this.down('tssprinttable').applyFilters(null);
                    }
                }
            }
        });
        
//        container.add({
//            xtype:'tsadvancedfilter',
////            stateful: true,
////            stateId: 'super-task-board-advanced-filter',
////            stateEvents: ['filterselected'],
//            listeners: {
//                scope: this,
//                filterselected: function(advanced_filter, filters) {
//                    var table = this.down('tssprinttable');
//                    
//                    if ( Ext.isEmpty(table) ) {
//                        return;
//                    }
//                    
//                    if ( ! Ext.isEmpty(filters) ) {
//                        console.log('Found Filters', filters.toString());
//                        this.down('tssprinttable').applyFilters(filters);
//                    } else {
//                        console.log('No filters');
//                        this.down('tssprinttable').applyFilters(null);
//                    }
//                }
//            }
//        });
//        container.add({
//            xtype:'rallycheckboxfield',
//            stateId: 'com.rallydev.technicalservices.superboard.showownerfilter',
//            stateful: true,
//            stateEvents: ['change'],
//            padding: 2,
//            listeners: {
//                scope: this,
//                change: function(checkbox) {
//                    var userbox = this.down('rallyusersearchcombobox');
//                    if (userbox){
//                        if (checkbox.getValue()) {
//                            userbox.setDisabled(false);
//                                                        
//                            if (!userbox.getValue()) {
//                                userbox.setValue(userbox.getRecord());
//                            }
//                            this.sprint_table.applyOwnerFilter(userbox.getValue());
//                        } else {
//                            userbox.setDisabled(true);
//                            this.sprint_table.applyOwnerFilter('all');
//                        }
//                    }
//                }
//            }
//        });
//        
//        container.add({
//            xtype: 'rallyusersearchcombobox',
//            project: this.getContext().getProject()._ref,
//            fieldLabel: 'Filter by Owner:',
//            disabled: true,
//            allowNoEntry: true,
//            allowBlank: true,
//            padding: 2,
//            stateId: 'com.rallydev.technicalservices.superboard.ownerfilter',
//            stateful: true,
//            stateEvents: ['select','change'],
//            listeners: {
//                scope: this,
//                change: function(userbox) {
//                    if ( this.down('tssprinttable') ) {
//                        this.down('tssprinttable').applyOwnerFilter(userbox.getValue());
//                    }
//                },
//                setValue: function(userbox) {
//                    if ( this.down('tssprinttable') ) {
//                        this.down('tssprinttable').applyOwnerFilter(userbox.getValue());
//                    }
//                }
//            }
//        });
        
        container.add({
            itemId:'spacer',
            xtype: 'container',
            flex: 1
        });
        
        container.add({
            xtype:'rallyiterationcombobox',
            listeners: {
                scope: this,
                change: function(combo) {
                    this.iteration = combo.getRecord();
                    this.updateData();
                }
            }
        });
    },
    
    updateData: function()  { 
        var me = this;
        
        if ( this.down('tssprinttable') ) { this.down('tssprinttable').destroy(); }
        
        this.setLoading('Fetching items in iteration ' + this.iteration.get('Name'));
        
        var columnSettings = null;
        if ( !Ext.isEmpty(this.getSetting('columns') ) ){
            columnSettings = this.getSetting('columns');
            if ( Ext.isString(columnSettings)) {
                columnSettings = Ext.JSON.decode(columnSettings);
            }
        }
        this.sprint_table = this.down('#display_box').add({ 
            xtype: 'tssprinttable',
            iteration: this.iteration,
            taskStateField: this.getSetting('taskStateField'),
            columnSettings: columnSettings,
            region: 'center',
            layout: 'fit',
            listeners: {
                gridReady: function() {
                    me.setLoading(false);
                }
            }
        });
        
        this.sprint_table.on('gridReady', function() {
            var checkbox = me.down('rallycheckboxfield');
            var userbox  = me.down('rallyusersearchcombobox');
            var advanced_filter = me.down('tsadvancedfilter');
            
            if ( checkbox && checkbox.getValue() ) {
                userbox.setDisabled(false);
                me.sprint_table.applyOwnerFilter(userbox.getValue());
            }
            
            if ( advanced_filter && advanced_filter.getFilters() ) {
                me.sprint_table.applyFilters(advanced_filter.getFilters());
            }
        }, this, { single: true });
    },
    
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        
        //Ext.apply(this, settings);
        this.launch();
    },
    
    _filterOutExceptChoices: function(store) {
        var app = Rally.getApp();
        
        store.filter([{
            filterFn:function(field){ 
                
                var forbidden_fields = ['Recycled','Ready'];
                if ( Ext.Array.contains(forbidden_fields, field.get('name') ) ) {
                    return false;
                }
                
                var attribute_definition = field.get('fieldDefinition').attributeDefinition;
                var attribute_type = null;
                if ( attribute_definition ) {
                    attribute_type = attribute_definition.AttributeType;
                }
                if (  attribute_type == "BOOLEAN" ) {
                    return false;
                }
                if ( attribute_type == "STRING" || attribute_type == "STATE" ) {
                    if ( field.get('fieldDefinition').attributeDefinition.Constrained ) {
                        return true;
                    }
                }
                return false;
            } 
        }]);
    },
    
    getSettingsFields: function() {
        var me = this;
        
        return [{
            name: 'taskStateField',
            xtype: 'tsmultimodelfieldcombobox',
            fieldLabel: 'Child Item Column Field',
            labelWidth: 150,
            labelAlign: 'left',
            minWidth: 400,
            margin: 10,
            autoExpand: false,
            alwaysExpanded: false,
            models: 'Task,Defect',
            listeners: {
                select: function(field_box) {
                    this.fireEvent('fieldselected', field_box.getRecord().get('fieldDefinition'));
                },
                
                ready: function(field_box) {
                me._filterOutExceptChoices(field_box.getStore());
                    if (field_box.getRecord()) {
                        this.fireEvent('fieldselected', field_box.getRecord().get('fieldDefinition'));
                    }
                }
            },
            bubbleEvents: ['fieldselected', 'fieldready']
        },
            
        {
            name: 'columns',
            readyEvent: 'ready',
            fieldLabel: '',
            margin: '5px 0 0 80px',
            xtype: 'tscolumnsettingsfield',
            handlesEvents: {
                fieldselected: function(field) {
                    this.refreshWithNewField(field);
                }
            },
            listeners: {
                ready: function() {
                    this.fireEvent('columnsettingsready');
                }
            },
            bubbleEvents: 'columnsettingsready'
        }];
    }
        
});

            
               Rally.launchApp('TSSuperCardboard', {
                   name: 'TS Super Cardboard'
               });
        });
    </script>
    
    <style type="text/css">

div.ts_workproduct_card {
    padding: 2px;
    text-align: center;
    font-size: 12px;
}

.rui-card { 
    margin: 10px 5px 5px 5px;
}

.x-border-layout-ct {
    background-color: #fff;
}

div.actions {
    color: #337ec6;
    text-align: right;
}

td {
    text-align: left;
    font-weight: normal;
}

table {
    display: table;
    border-collapse: separate;
    border-spacing: 2px;
    border-color: grey;
}

div.ts_task_card {
    margin: 2px;
    padding: 2px;
    width: 50px;
    height:35px;
    text-align: center;
    font-size: 9px;
    border: 1px solid black;
    float: left;
    overflow: hidden;
}

.ts_task_card.blocked {
    border: 2px solid red !important;
}

.ts_task_card.defect {
    border-radius: 15px;
}

.ts-editor-field-label {
    font-size: 14px;
    font-weight: bold;
    text-align: right;
    background-color: #eee;
}

.ts-editor-field-contents {
    font-size: 14px;
}
.remove-quick-filter-icon {
    float: left;
    color: #00a9e0;
}
    </style>

</head>
<body></body>
</html>